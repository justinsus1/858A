{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT7, 1.3333333333333333, false);\nmotor RightDriveSmart = motor(PORT12, 1.3333333333333333, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\nmotor Yellow = motor(PORT8, false);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nvoid setup() {\n  calibrateDrivetrain();\n  Drivetrain.setDriveVelocity(100, percent);\n  Drivetrain.setTurnVelocity(100, percent);\n  Drivetrain.setStopping(hold);\n\n  LeftDriveSmart.setMaxTorque(100, percent);\n  LeftDriveSmart.setVelocity(100, percent);\n  LeftDriveSmart.setStopping(hold);\n  RightDriveSmart.setMaxTorque(100, percent);\n  RightDriveSmart.setVelocity(75, percent);\n  RightDriveSmart.setStopping(hold);\n\n  // Yellow\n  Yellow.setStopping(hold);\n  Yellow.setMaxTorque(100, percent);\n  Yellow.setVelocity(100, percent);\n  Yellow.setTimeout(1, seconds);\n}\n\nvoid toYellow() {\n  // Drivetrain\n  LeftDriveSmart.spinFor(reverse, 890, degrees, false);\n  RightDriveSmart.spinFor(reverse, 890, degrees);\n  \n  Yellow.spinFor(reverse, 260, degrees);\n  // Drivetrain\n  LeftDriveSmart.spinFor(forward, 120, degrees, false);\n  RightDriveSmart.spinFor(forward, 120, degrees);\n\n  Yellow.spinToPosition(0, degrees);  \n}\n\nint main() {\n  // Begin project code\n  setup();\n  toYellow();\n}\n","textLanguage":"cpp","rconfig":[{"port":[7,12,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"4:3","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"}},{"port":[8],"name":"Yellow","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}